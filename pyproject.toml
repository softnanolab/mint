[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mint"
version = "0.1.0"
description = "Learning the language of protein-protein interactions"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Varun Ullanat", email = "varunullanat2012@example.com"}
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "biopython>=1.79",
    "einops>=0.7.0",
    "fairscale>=0.4.6",
    "hydra-core>=1.3.2",
    "omegaconf>=2.3.0",
    "pandas>=1.5.0",
    "numpy>=1.21.2",
    "scipy>=1.9.0",
    "matplotlib>=3.6.0",
    "scikit-learn>=1.1.0",
    "lightning>=2.0.0",
    "deepspeed>=0.9.0",
    "datasets>=2.14.0",
    "huggingface-hub>=0.16.4",
    "sentencepiece>=0.2.0",
    "protobuf>=3.20.3",
    "requests>=2.28.0",
    "filelock>=3.12.2",
    "gdown>=4.7.3",
    "regex>=2024.4.16",
    "absl-py>=2.1.0",
    "openpyxl>=3.1.3",
    "rdkit>=2022.9.5",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
jupyter = [
    "ipykernel>=6.15.2",
    "ipython>=8.0.0",
    "jupyter_client>=7.4.9",
    "jupyter_core>=4.11.2",
    "jupyterlab-widgets>=3.0.10",
]
bio = [
    "openmm>=8.0.0",
    "pdbfixer>=1.9",
]

[project.urls]
Homepage = "https://github.com/VarunUllanat/mint"
Repository = "https://github.com/VarunUllanat/mint"
Issues = "https://github.com/VarunUllanat/mint/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 99
target-version = ["py38", "py39", "py310", "py311"]
exclude = '''
/(
    \.git
  | __pycache__
  | build
  | dist
  | experimental
  | third_party
)/
'''

[tool.isort]
profile = "black"
line_length = 99
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["src/mint"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]